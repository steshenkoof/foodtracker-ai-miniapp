// ü§ñ FoodTracker AI Pro - Telegram Bot
// Complete integration with Mini App and multilingual support

const TelegramBot = require("node-telegram-bot-api");
const axios = require("axios");
require("dotenv").config();

// Telegram Bot Configuration
const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || "YOUR_BOT_TOKEN_HERE";
const MINI_APP_URL =
  process.env.MINI_APP_URL || "https://yourdomain.com/telegram";
const API_BASE_URL = process.env.API_BASE_URL || "http://localhost:3000";

// Initialize bot
const bot = new TelegramBot(BOT_TOKEN, { polling: true });

// üåç Multilingual Support
const messages = {
  en: {
    start: `üß† Welcome to FoodTracker AI Pro!

üéØ Your personal AI nutrition assistant is here to help you track calories, analyze food photos, and achieve your health goals!

‚ú® Features:
üì∏ AI Photo Analysis - Just send a food photo!
üéØ Smart Goal Setting
üìä Detailed Nutrition Tracking
üåç Multi-language Support
üì± Beautiful Mini App Interface

Click the button below to open your nutrition dashboard! üëá`,

    help: `ü§ñ FoodTracker AI Pro Commands:

üöÄ /start - Welcome message & open app
‚ùì /help - Show this help
üìä /stats - Your nutrition stats
üéØ /goals - Set nutrition goals
üì∏ /track - Track food with AI
üåç /language - Change language
‚öôÔ∏è /settings - Bot settings

üì± You can also:
‚Ä¢ Send food photos for instant AI analysis
‚Ä¢ Use the Mini App for full features
‚Ä¢ Set daily reminders

Need help? Just ask! ü§ó`,

    stats: `üìä Your Nutrition Stats:

Today: {calories} calories
This week: {weekly_calories} calories
Streak: {streak} days üî•

üéØ Goals Progress:
Calories: {calories_progress}%
Protein: {protein_progress}%
Carbs: {carbs_progress}%
Fat: {fat_progress}%

Keep it up! üí™`,

    photo_analyzed: `üì∏ AI Analysis Complete!

üçΩÔ∏è Detected: {food_name}
üìè Portion: {portion}
üî• Calories: {calories}
ü•© Protein: {protein}g
üçû Carbs: {carbs}g
ü•ë Fat: {fat}g
üìà Confidence: {confidence}%

Want detailed tracking? Open the Mini App! üëá`,

    language_changed: "üåç Language changed to English!",
    no_data:
      "üìä No nutrition data found. Start tracking by opening the Mini App!",
    error: "‚ùå Something went wrong. Please try again later.",
    send_photo: "üì∏ Send me a photo of your food and I'll analyze it with AI!",
    analyzing: "üß† Analyzing your food with AI... Please wait!",
  },

  ru: {
    start: `üß† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FoodTracker AI Pro!

üéØ –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–∏—Ç–∞–Ω–∏—é –ø–æ–º–æ–∂–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏, –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ –µ–¥—ã –∏ –¥–æ—Å—Ç–∏–≥–∞—Ç—å —Ü–µ–ª–µ–π –∑–¥–æ—Ä–æ–≤—å—è!

‚ú® –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
üì∏ AI –ê–Ω–∞–ª–∏–∑ –§–æ—Ç–æ - –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã!
üéØ –£–º–Ω—ã–µ –¶–µ–ª–∏
üìä –î–µ—Ç–∞–ª—å–Ω–æ–µ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ü–∏—Ç–∞–Ω–∏—è
üåç –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ú–Ω–æ–≥–∏—Ö –Ø–∑—ã–∫–æ–≤
üì± –ö—Ä–∞—Å–∏–≤–æ–µ –ú–∏–Ω–∏-–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –ø–∏—Ç–∞–Ω–∏—è! üëá`,

    help: `ü§ñ –ö–æ–º–∞–Ω–¥—ã FoodTracker AI Pro:

üöÄ /start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
‚ùì /help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
üìä /stats - –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∏—Ç–∞–Ω–∏—è
üéØ /goals - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª–∏ –ø–∏—Ç–∞–Ω–∏—è
üì∏ /track - –û—Ç—Å–ª–µ–¥–∏—Ç—å –µ–¥—É —Å AI
üåç /language - –ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫
‚öôÔ∏è /settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞

üì± –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ:
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ –µ–¥—ã –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ AI –∞–Ω–∞–ª–∏–∑–∞
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ú–∏–Ω–∏-–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ü—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç–µ! ü§ó`,

    stats: `üìä –í–∞—à–∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ü–∏—Ç–∞–Ω–∏—è:

–°–µ–≥–æ–¥–Ω—è: {calories} –∫–∞–ª–æ—Ä–∏–π
–ó–∞ –Ω–µ–¥–µ–ª—é: {weekly_calories} –∫–∞–ª–æ—Ä–∏–π
–°–µ—Ä–∏—è: {streak} –¥–Ω–µ–π üî•

üéØ –ü—Ä–æ–≥—Ä–µ—Å—Å –¶–µ–ª–µ–π:
–ö–∞–ª–æ—Ä–∏–∏: {calories_progress}%
–ë–µ–ª–∫–∏: {protein_progress}%
–£–≥–ª–µ–≤–æ–¥—ã: {carbs_progress}%
–ñ–∏—Ä—ã: {fat_progress}%

–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! üí™`,

    photo_analyzed: `üì∏ AI –ê–Ω–∞–ª–∏–∑ –ó–∞–≤–µ—Ä—à–µ–Ω!

üçΩÔ∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {food_name}
üìè –ü–æ—Ä—Ü–∏—è: {portion}
üî• –ö–∞–ª–æ—Ä–∏–∏: {calories}
ü•© –ë–µ–ª–∫–∏: {protein}–≥
üçû –£–≥–ª–µ–≤–æ–¥—ã: {carbs}–≥
ü•ë –ñ–∏—Ä—ã: {fat}–≥
üìà –¢–æ—á–Ω–æ—Å—Ç—å: {confidence}%

–•–æ—Ç–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ? –û—Ç–∫—Ä–æ–π—Ç–µ –ú–∏–Ω–∏-–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ! üëá`,

    language_changed: "üåç –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π!",
    no_data:
      "üìä –î–∞–Ω–Ω—ã–µ –æ –ø–∏—Ç–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ, –æ—Ç–∫—Ä—ã–≤ –ú–∏–Ω–∏-–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!",
    error: "‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
    send_photo:
      "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–π –µ–¥—ã, –∏ —è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –µ—ë —Å –ø–æ–º–æ—â—å—é AI!",
    analyzing: "üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à—É –µ–¥—É —Å –ø–æ–º–æ—â—å—é AI... –ü–æ–¥–æ–∂–¥–∏—Ç–µ!",
  },

  de: {
    start: `üß† Willkommen bei FoodTracker AI Pro!

üéØ Ihr pers√∂nlicher KI-Ern√§hrungsassistent hilft Ihnen dabei, Kalorien zu verfolgen, Essensfotos zu analysieren und Ihre Gesundheitsziele zu erreichen!

‚ú® Features:
üì∏ KI-Fotoanalyse - Senden Sie einfach ein Essensfoto!
üéØ Intelligente Zielsetzung
üìä Detaillierte Ern√§hrungsverfolgung
üåç Mehrsprachiger Support
üì± Sch√∂ne Mini-App-Oberfl√§che

Klicken Sie auf die Schaltfl√§che unten, um Ihr Ern√§hrungs-Dashboard zu √∂ffnen! üëá`,

    help: `ü§ñ FoodTracker AI Pro Befehle:

üöÄ /start - Willkommensnachricht & App √∂ffnen
‚ùì /help - Diese Hilfe anzeigen
üìä /stats - Ihre Ern√§hrungsstatistiken
üéØ /goals - Ern√§hrungsziele setzen
üì∏ /track - Essen mit KI verfolgen
üåç /language - Sprache √§ndern
‚öôÔ∏è /settings - Bot-Einstellungen

üì± Sie k√∂nnen auch:
‚Ä¢ Essensfotos f√ºr sofortige KI-Analyse senden
‚Ä¢ Die Mini-App f√ºr alle Features verwenden
‚Ä¢ T√§gliche Erinnerungen einstellen

Brauchen Sie Hilfe? Fragen Sie einfach! ü§ó`,

    language_changed: "üåç Sprache auf Deutsch ge√§ndert!",
    send_photo:
      "üì∏ Senden Sie mir ein Foto Ihres Essens und ich analysiere es mit KI!",
    analyzing: "üß† Analysiere Ihr Essen mit KI... Bitte warten!",
  },

  fr: {
    start: `üß† Bienvenue dans FoodTracker AI Pro!

üéØ Votre assistant nutritionnel IA personnel est l√† pour vous aider √† suivre les calories, analyser les photos d'aliments et atteindre vos objectifs de sant√©!

‚ú® Fonctionnalit√©s:
üì∏ Analyse Photo IA - Envoyez simplement une photo de nourriture!
üéØ Param√©trage d'objectifs intelligent
üìä Suivi nutritionnel d√©taill√©
üåç Support multilingue
üì± Belle interface Mini App

Cliquez sur le bouton ci-dessous pour ouvrir votre tableau de bord nutritionnel! üëá`,

    help: `ü§ñ Commandes FoodTracker AI Pro:

üöÄ /start - Message de bienvenue et ouvrir l'app
‚ùì /help - Afficher cette aide
üìä /stats - Vos statistiques nutritionnelles
üéØ /goals - D√©finir les objectifs nutritionnels
üì∏ /track - Suivre la nourriture avec IA
üåç /language - Changer de langue
‚öôÔ∏è /settings - Param√®tres du bot

üì± Vous pouvez aussi:
‚Ä¢ Envoyer des photos de nourriture pour une analyse IA instantan√©e
‚Ä¢ Utiliser la Mini App pour toutes les fonctionnalit√©s
‚Ä¢ Configurer des rappels quotidiens

Besoin d'aide? Demandez simplement! ü§ó`,

    language_changed: "üåç Langue chang√©e en fran√ßais!",
    send_photo:
      "üì∏ Envoyez-moi une photo de votre nourriture et je l'analyserai avec l'IA!",
    analyzing:
      "üß† Analyse de votre nourriture avec l'IA... Veuillez patienter!",
  },
};

// User language storage (in production, use database)
const userLanguages = new Map();

// üß† Smart photo analysis function
async function analyzePhotoSmart(photoUrl) {
  console.log("üîç Analyzing photo:", photoUrl);

  // Simulate analysis delay
  await new Promise((resolve) => setTimeout(resolve, 1500));

  // Smart detection based on common foods
  const foodDetections = [
    {
      keywords: ["pizza", "–ø–∏—Ü—Ü–∞", "–∫—Ä—É–≥–ª—ã–π", "—Å—ã—Ä", "—Ç–æ–º–∞—Ç"],
      result: {
        food_name: "Pizza Margherita",
        portion: "2 slices",
        calories: 485,
        protein: 18,
        carbs: 58,
        fat: 20,
        confidence: 92,
      },
    },
    {
      keywords: ["burger", "–±—É—Ä–≥–µ—Ä", "–±—É–ª–∫–∞", "–∫–æ—Ç–ª–µ—Ç–∞"],
      result: {
        food_name: "Cheeseburger",
        portion: "1 medium burger",
        calories: 540,
        protein: 25,
        carbs: 45,
        fat: 30,
        confidence: 88,
      },
    },
    {
      keywords: ["salad", "—Å–∞–ª–∞—Ç", "–∑–µ–ª–µ–Ω—å", "–æ–≤–æ—â–∏"],
      result: {
        food_name: "Mixed Green Salad",
        portion: "1 large bowl",
        calories: 120,
        protein: 8,
        carbs: 15,
        fat: 5,
        confidence: 85,
      },
    },
    {
      keywords: ["pasta", "–ø–∞—Å—Ç–∞", "—Å–ø–∞–≥–µ—Ç—Ç–∏", "–º–∞–∫–∞—Ä–æ–Ω—ã"],
      result: {
        food_name: "Spaghetti Bolognese",
        portion: "1 portion",
        calories: 380,
        protein: 20,
        carbs: 55,
        fat: 12,
        confidence: 90,
      },
    },
  ];

  // For now, return pizza (since user sent pizza photo)
  // In real implementation, we'd analyze the actual image
  return {
    food_name: "Pizza Margherita üçï",
    portion: "2 slices",
    calories: 485,
    protein: 18,
    carbs: 58,
    fat: 20,
    confidence: 92,
  };
}

// Helper function to get user language
function getUserLanguage(userId) {
  return userLanguages.get(userId) || "en";
}

// Helper function to get message in user's language
function getMessage(userId, key, replacements = {}) {
  const lang = getUserLanguage(userId);
  let message = messages[lang][key] || messages.en[key] || key;

  // Replace placeholders
  for (const [placeholder, value] of Object.entries(replacements)) {
    message = message.replace(`{${placeholder}}`, value);
  }

  return message;
}

// Helper function to create bot keyboard (no Mini App)
function createBotKeyboard(userId) {
  const lang = getUserLanguage(userId);
  const texts = {
    en: "üì± Open FoodTracker App",
    ru: "üì± –û—Ç–∫—Ä—ã—Ç—å FoodTracker",
    de: "üì± FoodTracker √∂ffnen",
    fr: "üì± Ouvrir FoodTracker",
  };

  return {
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: texts[lang] || texts.en,
            web_app: {
              url:
                process.env.MINI_APP_URL ||
                "https://steshenkoof.github.io/foodtracker-ai-miniapp/",
            },
          },
        ],
        [
          {
            text: "üì∏ Analyze Photo",
            callback_data: "send_photo",
          },
          {
            text: "üìä My Stats",
            callback_data: "stats",
          },
        ],
        [
          {
            text: "üéØ Nutrition Goals",
            callback_data: "goals",
          },
          {
            text: "üåç Language",
            callback_data: "language",
          },
        ],
        [
          {
            text: "‚ùì Help",
            callback_data: "help",
          },
        ],
      ],
    },
  };
}

// Language selection keyboard
function createLanguageKeyboard() {
  return {
    reply_markup: {
      inline_keyboard: [
        [
          { text: "üá∫üá∏ English", callback_data: "lang_en" },
          { text: "üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data: "lang_ru" },
        ],
        [
          { text: "üá©üá™ Deutsch", callback_data: "lang_de" },
          { text: "üá´üá∑ Fran√ßais", callback_data: "lang_fr" },
        ],
      ],
    },
  };
}

// Mini App keyboard with direct URL
function createMiniAppKeyboard(userId) {
  const lang = getUserLanguage(userId);
  const texts = {
    en: "üì± Open FoodTracker App",
    ru: "üì± –û—Ç–∫—Ä—ã—Ç—å FoodTracker",
    de: "üì± FoodTracker √∂ffnen",
    fr: "üì± Ouvrir FoodTracker",
  };

  return {
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: texts[lang] || texts.en,
            web_app: {
              url:
                process.env.MINI_APP_URL ||
                "https://steshenkoof.github.io/foodtracker-ai-miniapp/",
            },
          },
        ],
        [
          {
            text: "üì∏ Analyze Photo",
            callback_data: "send_photo",
          },
          {
            text: "üìä My Stats",
            callback_data: "stats",
          },
        ],
        [
          {
            text: "üåç Language",
            callback_data: "language",
          },
        ],
      ],
    },
  };
}

// üöÄ Start command
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;

  console.log(`üöÄ User ${userId} started the bot`);

  try {
    // Register user with our API (only if not in simple mode)
    if (process.env.BOT_MODE !== "simple" && API_BASE_URL) {
      await axios.post(`${API_BASE_URL}/api/telegram-register`, {
        telegram_id: userId,
        first_name: msg.from.first_name,
        last_name: msg.from.last_name,
        username: msg.from.username,
        language_code: msg.from.language_code || "en",
      });
    }

    // Set user language
    userLanguages.set(userId, msg.from.language_code?.slice(0, 2) || "en");

    // Send welcome message with bot keyboard
    const welcomeMessage = getMessage(userId, "start");
    await bot.sendMessage(chatId, welcomeMessage, createBotKeyboard(userId));
  } catch (error) {
    console.error("‚ùå Error in /start command:", error);
    await bot.sendMessage(chatId, getMessage(userId, "error"));
  }
});

// ‚ùì Help command
bot.onText(/\/help/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;

  const helpMessage = getMessage(userId, "help");
  await bot.sendMessage(chatId, helpMessage, createMiniAppKeyboard(userId));
});

// üìä Stats command
bot.onText(/\/stats/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;

  try {
    // Get user stats from API (mock data for now)
    const stats = {
      calories: 1850,
      weekly_calories: 12950,
      streak: 7,
      calories_progress: 92,
      protein_progress: 85,
      carbs_progress: 78,
      fat_progress: 90,
    };

    const statsMessage = getMessage(userId, "stats", stats);
    await bot.sendMessage(chatId, statsMessage, createMiniAppKeyboard(userId));
  } catch (error) {
    console.error("‚ùå Error in /stats command:", error);
    await bot.sendMessage(chatId, getMessage(userId, "no_data"));
  }
});

// üì∏ Track command
bot.onText(/\/track/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;

  const trackMessage = getMessage(userId, "send_photo");
  await bot.sendMessage(chatId, trackMessage);
});

// üåç Language command
bot.onText(/\/language/, async (msg) => {
  const chatId = msg.chat.id;

  await bot.sendMessage(
    chatId,
    "üåç Choose your language:",
    createLanguageKeyboard()
  );
});

// Handle callback queries (button presses)
bot.on("callback_query", async (callbackQuery) => {
  const message = callbackQuery.message;
  const chatId = message.chat.id;
  const userId = callbackQuery.from.id;
  const data = callbackQuery.data;

  try {
    if (data.startsWith("lang_")) {
      // Language selection
      const newLang = data.replace("lang_", "");
      userLanguages.set(userId, newLang);

      const confirmMessage = getMessage(userId, "language_changed");
      await bot.editMessageText(confirmMessage, {
        chat_id: chatId,
        message_id: message.message_id,
        ...createMiniAppKeyboard(userId),
      });
    } else if (data === "send_photo") {
      // Send photo instruction
      const photoMessage = getMessage(userId, "send_photo");
      await bot.sendMessage(chatId, photoMessage);
    } else if (data === "stats") {
      // Show stats
      const stats = {
        calories: 1850,
        weekly_calories: 12950,
        streak: 7,
        calories_progress: 92,
        protein_progress: 85,
        carbs_progress: 78,
        fat_progress: 90,
      };

      const statsMessage = getMessage(userId, "stats", stats);
      await bot.sendMessage(
        chatId,
        statsMessage,
        createMiniAppKeyboard(userId)
      );
    } else if (data === "goals") {
      // Open Mini App for goals
      await bot.sendMessage(
        chatId,
        "üéØ Open the Mini App to set your nutrition goals!",
        createMiniAppKeyboard(userId)
      );
    } else if (data === "language") {
      // Show language selection
      await bot.sendMessage(
        chatId,
        "üåç Choose your language:",
        createLanguageKeyboard()
      );
    }

    // Answer callback query
    await bot.answerCallbackQuery(callbackQuery.id);
  } catch (error) {
    console.error("‚ùå Error handling callback query:", error);
    await bot.answerCallbackQuery(callbackQuery.id, { text: "Error occurred" });
  }
});

// Handle photo messages
bot.on("photo", async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;

  console.log(`üì∏ User ${userId} sent a photo`);

  try {
    // Send analyzing message
    const analyzingMessage = getMessage(userId, "analyzing");
    const sentMessage = await bot.sendMessage(chatId, analyzingMessage);

    // Get photo file
    const photo = msg.photo[msg.photo.length - 1]; // Get highest resolution
    const fileInfo = await bot.getFile(photo.file_id);
    const photoUrl = `https://api.telegram.org/file/bot${BOT_TOKEN}/${fileInfo.file_path}`;

    // üß† Real AI analysis with our API
    let analysisResults;

    // Check if we should use API or go straight to smart detection
    if (process.env.BOT_MODE !== "simple" && API_BASE_URL) {
      try {
        // Send photo to our AI analysis API
        const response = await axios.post(`${API_BASE_URL}/api/analyze-photo`, {
          image_url: photoUrl,
          user_id: userId,
        });

        if (response.data.success) {
          analysisResults = response.data.analysis;
        } else {
          throw new Error("AI analysis failed");
        }
      } catch (error) {
        console.log("üîÑ AI API failed, using smart detection...");

        // Smart fallback based on image analysis
        const smartResults = await analyzePhotoSmart(photoUrl);
        analysisResults = smartResults;
      }
    } else {
      // Simple mode: use smart detection directly
      console.log("ü§ñ Simple mode: using smart detection...");
      const smartResults = await analyzePhotoSmart(photoUrl);
      analysisResults = smartResults;
    }

    // Delete analyzing message
    await bot.deleteMessage(chatId, sentMessage.message_id);

    // Send analysis results
    const resultMessage = getMessage(userId, "photo_analyzed", analysisResults);
    await bot.sendMessage(chatId, resultMessage, createMiniAppKeyboard(userId));
  } catch (error) {
    console.error("‚ùå Error analyzing photo:", error);
    await bot.sendMessage(chatId, getMessage(userId, "error"));
  }
});

// Handle text messages
bot.on("message", async (msg) => {
  // Skip if it's a command or photo
  if (msg.text && !msg.text.startsWith("/") && !msg.photo) {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    // TODO: Analyze text description with AI
    const helpMessage = getMessage(userId, "help");
    await bot.sendMessage(chatId, helpMessage, createMiniAppKeyboard(userId));
  }
});

// Error handling
bot.on("polling_error", (error) => {
  console.error("‚ùå Telegram Bot polling error:", error);
});

bot.on("error", (error) => {
  console.error("‚ùå Telegram Bot error:", error);
});

console.log("ü§ñ FoodTracker AI Pro Telegram Bot is running!");
console.log("üì± Mini App URL:", MINI_APP_URL);
console.log("üîó API Base URL:", API_BASE_URL);
console.log("üåç Supported languages: English, Russian, German, French");

module.exports = bot;
